{"mappings":"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","sources":["src/dom.js"],"sourcesContent":["window.dom = {\r\n    create(string) {\r\n        const container = document.createElement(\"template\");\r\n        container.innerHTML = string.trim();\r\n        return container.content.firstChild;\r\n    },\r\n    after(node, node2) {\r\n        node.parentNode.insertBefore(node2, node.nextSibling)\r\n\r\n    },\r\n    before(node, node2) {\r\n        node.parentNode.insertBefore(node2, node)\r\n    },\r\n    append(parent, child) {\r\n        parent.appendChild(child)\r\n    },\r\n    warp(node, parent) {\r\n        dom.before(node, parent);\r\n        dom.append(parent, node)\r\n    },\r\n    remove(node) {\r\n        node.parentNode.removeChild(node)\r\n        return node\r\n    },\r\n    empty(parent) {\r\n\r\n        const array = []\r\n        let x = node.firstChild\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild\r\n        }\r\n        return array\r\n        // for (let i = 0; i < parent.childNodes.length; i++) {\r\n        //     dom.remove(parent.childNodes[i])\r\n        // }\r\n\r\n    },\r\n    attr(node, key, values) {\r\n        if (arguments.length === 2) {\r\n            return node.getAttribute(key)\r\n        }\r\n        else if (arguments.length === 3) {\r\n            node.setAttribute(key, values)\r\n        }\r\n    },\r\n    text(node, string) {\r\n        if (arguments.length === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerHTML\r\n            } else {\r\n                return node.textContent\r\n            }\r\n\r\n        }\r\n        else if (arguments.length === 2) {\r\n            if ('innerText' in node) {\r\n                node.innerHTML = string;\r\n            } else {\r\n                node.textContent = string\r\n            }\r\n\r\n        }\r\n    },\r\n    html(node, string) {\r\n        if (arguments.length === 1) {\r\n            return node.innerHTML\r\n        }\r\n        else if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n        }\r\n    },\r\n    style(node, name, values) {\r\n        if (arguments.length === 3) {\r\n            //dom.style(div,'color','red')\r\n            node.style[name] = values\r\n        } else if (arguments.length === 2) {\r\n            //dom.style(div,'color')\r\n            if (typeof name === 'string') {\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                //dom.style(div,{color:'red'})\r\n                const object = name;\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n    class: {\r\n        add(node, className) {\r\n            return node.classList.add(className)\r\n        },\r\n        remove(node, className) {\r\n            return node.classList.remove(className)\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        },\r\n    },\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    children(node) {\r\n        return node.childNodes\r\n    },\r\n    sibling(node) {\r\n        // array = []\r\n        // for (let i = 0; i < node.parentNode.childNodes.length; i++) {\r\n        //     if (node.parentNode.childNodes[i] != node) {\r\n        //         array.push(node.parentNode.childNodes[i])\r\n        //     }\r\n        // }\r\n        // return array\r\n        return Array.from(node.parentNode.children).filter(n => n != node)\r\n\r\n    },\r\n    next(node) {\r\n        //排除回车，导致下一个节点是文本\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    previous(node) {\r\n\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    each(nodes, fn) {\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            fn.call(null, nodes[i])\r\n        }\r\n    },\r\n    index(node) {\r\n        let i;\r\n        for (i = 0; i < node.parentNode.childNodes.length; i++) {\r\n            if (node.parentNode.childNodes[i] === node) {\r\n                break;\r\n            }\r\n        }\r\n        return i\r\n    }\r\n\r\n\r\n}"],"names":[],"version":3,"file":"index.755bdb92.js.map","sourceRoot":"/__parcel_source_root/"}